{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError, retry, throwError } from 'rxjs';\nimport { environment } from '../environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n  constructor(http) {\n    this.http = http;\n    this.rootUrl = environment.apiEndPoint;\n    this.version = \"api/v1\";\n    this.baseUrl = `${this.rootUrl}/${this.version}`;\n    this.showErrorMessage = message => {\n      console.log(message);\n    };\n    this.handleError = error => {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        if (error.status === 401) {\n          console.log(\"login user out\");\n        }\n        this.showErrorMessage(error.error);\n      }\n      return throwError(() => 'Something went wrong, please try again later');\n    };\n  }\n  get(url, cb) {\n    const endpoint = this.baseUrl + url;\n    this.http.get(endpoint).pipe(retry(3), catchError(this.handleError)).subscribe(data => {\n      if (data.success) {\n        cb(data);\n      } else {\n        this.showErrorMessage(data);\n      }\n    });\n  }\n  search(url, query, cb, silent = false) {\n    const endpoint = this.baseUrl + url;\n    const params = new HttpParams({\n      fromObject: query\n    });\n    this.http.get(endpoint, {\n      params\n    }).pipe(\n    //  retry(3), // retry a failed request up to 3 times\n    catchError(this.handleError) // then handle the error\n    ).subscribe(data => {\n      if (!data.success) {\n        this.showErrorMessage(data);\n      } else {\n        cb(data);\n      }\n    });\n  }\n  post(url, body, cb) {\n    const endpoint = this.baseUrl + url;\n    this.http.post(endpoint, body).pipe(retry(0), catchError(this.handleError)).subscribe(data => {\n      if (data) {\n        cb(data);\n      } else {\n        this.showErrorMessage(data);\n      }\n    });\n  }\n  patch(url, body, cb) {\n    const endpoint = `${this.baseUrl} + ${url}`;\n    this.http.patch(endpoint, body).pipe(retry(3), catchError(this.handleError)).subscribe(data => {\n      if (data) {\n        cb(data);\n      } else {\n        this.showErrorMessage(data);\n      }\n    });\n  }\n  delete(url, cb, silent = false) {\n    const endpoint = this.baseUrl + url;\n    this.http.delete(endpoint).pipe(retry(3),\n    // retry a failed request up to 3 times\n    catchError(this.handleError) // then handle the error\n    ).subscribe(data => {\n      if (!data.success) {\n        this.showErrorMessage(data);\n      } else {\n        cb(data);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpParams","catchError","retry","throwError","environment","HttpService","constructor","http","apiEndPoint","rootUrl","version","message","console","log","error","ErrorEvent","status","showErrorMessage","get","url","cb","endpoint","baseUrl","pipe","handleError","subscribe","data","success","search","query","silent","params","fromObject","post","body","patch","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/mac/Documents/interview-assements/customers-app-fe/src/app/services/http.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpParams, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, retry, throwError } from 'rxjs';\nimport { environment } from '../environment/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  private rootUrl = environment.apiEndPoint;\n  private version = \"api/v1\";\n  private baseUrl = `${this.rootUrl}/${this.version}`\n\n  constructor(private http: HttpClient) { }\n\n  get(url: string, cb: any){\n    const endpoint = this.baseUrl + url\n    this.http\n      .get<ResponseObject>(endpoint)\n      .pipe(\n        retry(3),\n        catchError(this.handleError)\n      )\n      .subscribe(data => {\n        if(data.success){\n          cb(data);\n        }else {\n          this.showErrorMessage(data);\n        }\n      })\n  }\n\n  public search(url: string, query: any, cb: any, silent = false) {\n    const endpoint = this.baseUrl + url;\n    const params = new HttpParams({\n      fromObject: query,\n    });\n    this.http\n      .get<ResponseObject>(endpoint, { params })\n      .pipe(\n        //  retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError) // then handle the error\n      )\n      .subscribe((data) => {\n        if (!data.success) {\n          this.showErrorMessage(data);\n        } else {\n          cb(data);\n        }\n      });\n  }\n\n  post(url: string, body: any, cb: any){\n    const endpoint = this.baseUrl + url;\n    this.http\n      .post<ResponseObject>(endpoint, body)\n      .pipe(\n        retry(0),\n        catchError(this.handleError)\n      )\n      .subscribe(data => {\n        if(data){\n          cb(data)\n        }else {\n          this.showErrorMessage(data)\n        }\n      })\n  }\n\n  patch(url: string, body: any, cb: any){\n    const endpoint = `${this.baseUrl} + ${url}`;\n    this.http\n      .patch(endpoint, body)\n      .pipe(\n        retry(3),\n        catchError(this.handleError)\n      )\n      .subscribe((data) => {\n        if(data){\n          cb(data)\n        }else {\n          this.showErrorMessage(data);\n        }\n      });\n  }\n\n  public delete(url: string, cb, silent = false) {\n    const endpoint = this.baseUrl + url;\n    this.http\n      .delete<ResponseObject>(endpoint)\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError) // then handle the error\n      )\n      .subscribe((data) => {\n        if (!data.success) {\n          this.showErrorMessage(data);\n        } else {\n          cb(data);\n        }\n      });\n  }\n\n  private showErrorMessage = (message: any) => {\n    console.log(message);\n  }\n\n  private handleError = (error: HttpErrorResponse) => {\n    if(error.error instanceof ErrorEvent){\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    }else {\n      if(error.status === 401){\n        console.log(\"login user out\");\n      }\n      this.showErrorMessage(error.error);\n    }\n\n    return throwError(() => 'Something went wrong, please try again later')\n\n  }\n\n}\n\nexport interface ResponseObject {\n  success: boolean;\n  data: any;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}